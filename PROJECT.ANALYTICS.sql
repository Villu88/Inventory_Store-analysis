CREATE DATABASE PROJECT;

USE PROJECT;


SELECT * FROM DBO.PRODUCTS;

SELECT * FROM DBO.INVENTORY;

SELECT * FROM SALES;

SELECT * FROM DBO.STORES;

SELECT * FROM DBO.CALENDAR;


SELECT * FROM DBO.PRODUCTS;

CREATE VIEW PRODUCT AS
(SELECT *, CAST(REPLACE(PRODUCT_COST,'$','')AS DECIMAL(10,2)) AS PRO_COST,
CAST(REPLACE(PRODUCT_PRICE,'$','') AS DECIMAL(10,2)) AS PRO_PRICE 
FROM DBO.products);

1)--- TOP 5 PERFORMING PRODUCTS BASED ON TOTAL SALES----

SELECT TOP 5 P.PRODUCT_NAME,SUM(P.PRO_PRICE) AS TOTAL_PRICE FROM
DBO.SALES S LEFT JOIN PRODUCT P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_NAME
ORDER BY SUM(P.PRO_PRICE) DESC;

1)---TOP 5 PERFORMING PRODUCTS BASED ON TOTAL PROFIT----

SELECT TOP 5 P.PRODUCT_NAME, SUM(P.PRO_PRICE- P.PRO_COST) AS NET_PROFIT FROM
DBO.SALES S LEFT JOIN PRODUCT P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_NAME
ORDER BY SUM(P.PRO_PRICE- P.PRO_COST) DESC;


2)--- STORE PERFORMANCE ANALYSIS-- TOTAL REVENUE GENERATE BY EACH STORE ORDERED IN DESCENDING ORDER.

SELECT S.STORE_ID,S.STORE_NAME,CEILING(SUM(P.PRO_PRICE)) AS TOTAL_REVENUE FROM DBO.STORES S LEFT JOIN DBO.SALES S1 
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN PRODUCT P
ON S1.PRODUCT_ID = P.PRODUCT_ID
GROUP BY S.STORE_ID,S.Store_Name
ORDER BY SUM(P.PRO_PRICE) DESC;

2)--- STORE PERFORMANCE ANALYSIS-- TOTAL PROFIT MARGIN OF EACH STORE.

SELECT S.STORE_ID,S.STORE_NAME, CEILING(SUM(P.PRO_PRICE-P.PRO_COST)/(SUM(PRO_COST))*100) AS PROFIT_MARGIN_PERCENT FROM DBO.STORES S LEFT JOIN DBO.SALES S1 
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN PRODUCT P
ON S1.PRODUCT_ID = P.PRODUCT_ID
GROUP BY S.Store_ID, S.Store_Name
ORDER BY CAST(S.Store_ID AS INT);


3)--- MONTHLY SALES TREND ANALYSIS---


SELECT YEAR(DATE1) AS YEAR, MONTH(DATE1) AS MONTH,SUM(P.PRO_PRICE) AS TOTAL_SALES,LAG(SUM(P.PRO_PRICE)) OVER (PARTITION BY YEAR(DATE1) 
ORDER BY YEAR(DATE1), MONTH(DATE1)) AS PREV_M_SALE,CASE WHEN SUM(P.PRO_PRICE) > LAG(SUM(P.PRO_PRICE)) OVER (PARTITION BY YEAR(DATE1) 
ORDER BY YEAR(DATE1), MONTH(DATE1)) THEN 'GROWTH' ELSE 'DECLINE' END AS TREND,AVG(SUM(P.PRO_PRICE)) OVER (ORDER BY YEAR(DATE1), MONTH(DATE1)
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS ROLLING_AVG
FROM SALES1 S
LEFT JOIN 
PRODUCT P 
ON S.Product_ID = P.Product_ID
GROUP BY YEAR(DATE1), MONTH(DATE1)
ORDER BY YEAR(DATE1), MONTH(DATE1);


4)--- CUMULATIVE DISTRIBUTION OF PROFIT MARGIN---CATEGORY WISE

SELECT COALESCE(P.Product_Category,'OVERALL') AS PRODUCT_CATEGORY,COALESCE(P.Product_Name,'SUBTOTAL') AS PRODUCT_NAME, SUM(P.PRO_PRICE-P.PRO_COST) AS PROFIT_MARGIN 
FROM DBO.SALES S LEFT JOIN PRODUCT P
ON S.Product_ID = P.Product_ID
GROUP BY ROLLUP(P.Product_Category,P.Product_Name)
ORDER BY P.Product_Category;


5---STORE INVENTORY TURNOVER ANALYSIS---


--COGS OVER A PERIOD OF TIME--- (COST OF GOOD SOLD OVER YEAR 2022)---

---TOTAL INVENTORY VALUES OF EACH STORE-----


WITH COGS AS
(SELECT S1.STORE_NAME,S1.STORE_ID,SUM(P.PRO_PRICE) AS TOTAL_STORE_SALE_2022 FROM SALES S LEFT JOIN STORES S1
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN
PRODUCT P
ON S.Product_ID = P.Product_ID
WHERE DATE LIKE '%2022%'
GROUP BY S1.Store_Name,S1.Store_ID),

TIV AS
(SELECT I.STORE_ID,SUM(I.Stock_On_Hand*P.PRO_PRICE) AS TOTAL_INVENTORY FROM INVENTORY I LEFT JOIN PRODUCT P
ON I.Product_ID = P.Product_ID
GROUP BY I.STORE_ID)	

SELECT COGS.Store_Name,COGS.Store_ID, COGS.TOTAL_STORE_SALE_2022, TIV.TOTAL_INVENTORY, CEILING((TOTAL_STORE_SALE_2022/TOTAL_INVENTORY)) AS INV_TURNOVER_RATIO
FROM COGS LEFT JOIN TIV
ON COGS.STORE_ID = TIV.Store_ID
ORDER BY  CAST(COGS.Store_ID AS INT);


