CREATE DATABASE PROJECT;

USE PROJECT;


SELECT * FROM DBO.PRODUCTS;

SELECT * FROM DBO.INVENTORY;

SELECT * FROM SALES;

SELECT * FROM DBO.STORES;

SELECT * FROM DBO.CALENDAR;


SELECT * FROM DBO.PRODUCTS;

CREATE VIEW PRODUCT AS
(SELECT *, CAST(REPLACE(PRODUCT_COST,'$','')AS DECIMAL(10,2)) AS PRO_COST,
CAST(REPLACE(PRODUCT_PRICE,'$','') AS DECIMAL(10,2)) AS PRO_PRICE 
FROM DBO.products);

1)--- TOP 5 PERFORMING PRODUCTS BASED ON TOTAL SALES----

SELECT TOP 5 P.PRODUCT_NAME,SUM(P.PRO_PRICE) AS TOTAL_PRICE FROM
DBO.SALES S LEFT JOIN PRODUCT P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_NAME
ORDER BY SUM(P.PRO_PRICE) DESC;

1)---TOP 5 PERFORMING PRODUCTS BASED ON TOTAL PROFIT----

SELECT TOP 5 P.PRODUCT_NAME, SUM(P.PRO_PRICE- P.PRO_COST) AS NET_PROFIT FROM
DBO.SALES S LEFT JOIN PRODUCT P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_NAME
ORDER BY SUM(P.PRO_PRICE- P.PRO_COST) DESC;


2)--- STORE PERFORMANCE ANALYSIS-- TOTAL REVENUE GENERATE BY EACH STORE ORDERED IN DESCENDING ORDER.

SELECT S.STORE_ID,S.STORE_NAME,CEILING(SUM(P.PRO_PRICE)) AS TOTAL_REVENUE FROM DBO.STORES S LEFT JOIN DBO.SALES S1 
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN PRODUCT P
ON S1.PRODUCT_ID = P.PRODUCT_ID
GROUP BY S.STORE_ID,S.Store_Name
ORDER BY SUM(P.PRO_PRICE) DESC;

2)--- STORE PERFORMANCE ANALYSIS-- TOTAL PROFIT MARGIN OF EACH STORE.

SELECT S.STORE_ID,S.STORE_NAME, CEILING(SUM(P.PRO_PRICE-P.PRO_COST)/(SUM(PRO_COST))*100) AS PROFIT_MARGIN_PERCENT FROM DBO.STORES S LEFT JOIN DBO.SALES S1 
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN PRODUCT P
ON S1.PRODUCT_ID = P.PRODUCT_ID
GROUP BY S.Store_ID, S.Store_Name
ORDER BY CAST(S.Store_ID AS INT);


3)--- MONTHLY SALES TREND ANALYSIS---


SELECT YEAR(DATE1) AS YEAR, MONTH(DATE1) AS MONTH,SUM(P.PRO_PRICE) AS TOTAL_SALES,LAG(SUM(P.PRO_PRICE)) OVER (PARTITION BY YEAR(DATE1) 
ORDER BY YEAR(DATE1), MONTH(DATE1)) AS PREV_M_SALE,CASE WHEN SUM(P.PRO_PRICE) > LAG(SUM(P.PRO_PRICE)) OVER (PARTITION BY YEAR(DATE1) 
ORDER BY YEAR(DATE1), MONTH(DATE1)) THEN 'GROWTH' ELSE 'DECLINE' END AS TREND,AVG(SUM(P.PRO_PRICE)) OVER (ORDER BY YEAR(DATE1), MONTH(DATE1)
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS ROLLING_AVG
FROM SALES1 S
LEFT JOIN 
PRODUCT P 
ON S.Product_ID = P.Product_ID
GROUP BY YEAR(DATE1), MONTH(DATE1)
ORDER BY YEAR(DATE1), MONTH(DATE1);


4)--- CUMULATIVE DISTRIBUTION OF PROFIT MARGIN---CATEGORY WISE

SELECT COALESCE(P.Product_Category,'OVERALL') AS PRODUCT_CATEGORY,COALESCE(P.Product_Name,'SUBTOTAL') AS PRODUCT_NAME, SUM(P.PRO_PRICE-P.PRO_COST) AS PROFIT_MARGIN 
FROM DBO.SALES S LEFT JOIN PRODUCT P
ON S.Product_ID = P.Product_ID
GROUP BY ROLLUP(P.Product_Category,P.Product_Name)
ORDER BY P.Product_Category;


5---STORE INVENTORY TURNOVER ANALYSIS---


--COGS OVER A PERIOD OF TIME--- (COST OF GOOD SOLD OVER YEAR 2022)---

---TOTAL INVENTORY VALUES OF EACH STORE-----


WITH COGS AS
(SELECT S1.STORE_NAME,S1.STORE_ID,SUM(P.PRO_PRICE) AS TOTAL_STORE_SALE_2022 FROM SALES S LEFT JOIN STORES S1
ON S.STORE_ID = S1.STORE_ID
LEFT JOIN
PRODUCT P
ON S.Product_ID = P.Product_ID
WHERE DATE LIKE '%2022%'
GROUP BY S1.Store_Name,S1.Store_ID),

TIV AS
(SELECT I.STORE_ID,SUM(I.Stock_On_Hand*P.PRO_PRICE) AS TOTAL_INVENTORY FROM INVENTORY I LEFT JOIN PRODUCT P
ON I.Product_ID = P.Product_ID
GROUP BY I.STORE_ID)	

SELECT COGS.Store_Name,COGS.Store_ID, COGS.TOTAL_STORE_SALE_2022, TIV.TOTAL_INVENTORY, CEILING((TOTAL_STORE_SALE_2022/TOTAL_INVENTORY)) AS INV_TURNOVER_RATIO
FROM COGS LEFT JOIN TIV
ON COGS.STORE_ID = TIV.Store_ID
ORDER BY  CAST(COGS.Store_ID AS INT);


SELECT * FROM PRODUCT;

BEGIN TRAN

UPDATE PRODUCT
SET PRODUCT_NAME = 'VILLU'
WHERE PRODUCT_ID = 1

UPDATE PRODUCT
SET PRODUCT_NAME =  'MOTA'
WHERE PRODUCT_ID = 2;


ROLLBACK



CREATE TABLE DUMY
(ID INT IDENTITY,
NAME VARCHAR(20),
AGE INT);

INSERT INTO DUMY
VALUES('RAHUL',29);

SELECT * FROM DUMY

INSERT INTO DUMY
VALUES('VILLU',29),
('ROHIT',34),
('JASMER',50);

ALTER TABLE DUMY
ADD EID INT IDENTITY;


SELECT * FROM SALES

SELECT * FROM SALES WHERE PRODUCT_ID = 1 AND STORE_ID = 3;

SELECT * FROM SALES WHERE PRODUCT_ID = 21;

create index new on SALES (PRODUCT_ID,STORE_ID)


CREATE TABLE PRODUCT_COPY AS SELECT * FROM PRODUCT;

SELECT * INTO PRO_COPY1 FROM PRODUCT WHERE 1 = 2;


SELECT * FROM PRO_COPY1

SELECT * FROM EMP_SAL;

INSERT INTO EMP_SAL
VALUES('E0016','SCM','CHIEF',60000),
('E0017','QUALITY','ENGINEER',70000),
('E0018','WAREHOUSE','MANAGER',90000),
('E0019','IT','CHIEF',50000),
('E0020','PRODUCTION','CHIEF',47000),
('E0021','QUALITY','CHIEF',45900),
('E0022','WAREHOUSE','ENGINEER',82340),
('E0023','IT','MANAGER',95000),
('E0024','PRODUCTION','CHIEF',35000),
('E0025','SCM','CHIEF',42000);

SELECT * FROM EMP_SAL;


SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY EID) AS ROW_N FROM EMP_SAL;

SELECT * FROM
(SELECT *, RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) AS RANKK FROM EMP_SAL) AS NEW
WHERE RANKK IN (1,2);


--- COMPARE SALARY TO AVERGAE SALARY OF DEPT-----

SELECT *, CASE WHEN SALARY > AVG(SALARY) OVER(PARTITION BY DEPT) THEN 'MORE THAN AVG' END AS COMP FROM EMP_SAL;

SELECT * FROM(
SELECT *,AVG(SALARY) OVER(PARTITION BY DEPT) AS AVG_DEP_SAL FROM EMP_SAL) AS NEW
WHERE SALARY > AVG_DEP_SAL

---- MAX AND MIN SALARY OF A DEPARTMENT----

SELECT * FROM EMP_SAL

SELECT DISTINCT(DEPT) AS DEPPT, MAX(SALARY) OVER(PARTITION BY DEPT) AS DEP_MAX_SAL,
MIN(SALARY) OVER(PARTITION BY DEPT) AS DEP_MIN_SAL 
FROM EMP_SAL;

--- COMPARING SALARY WITH PREVIOUS EMPLOYEE---

SELECT *, COALESCE(LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY EID),0) AS PRE_SAL FROM EMP_SAL;

SELECT DISTINCT(DESI) FROM EMP_SAL

SELECT DEPT,
SUM(CASE WHEN DESI = 'CHIEF' THEN SALARY END) AS 'CHIEF',
SUM(CASE WHEN DESI = 'CONTROLLER' THEN SALARY END) AS 'CONTROLLER',
SUM(CASE WHEN DESI = 'ENGINEER' THEN SALARY END) AS 'ENGINEER',
SUM(CASE WHEN DESI = 'MANAGER' THEN SALARY END) AS 'MANAGER',
SUM(CASE WHEN DESI = 'OPERATOR' THEN SALARY END) AS 'OPERATOR'
FROM EMP_SAL
GROUP BY DEPT;

SELECT * FROM EMP_SAL WHERE DEPT = 'WAREHOUSE';


SELECT DEPT, DESI,COUNT(*) FROM EMP_SAL
GROUP BY DEPT,DESI
HAVING COUNT(*) > 1;

SELECT * INTO EMP_COPY1 FROM EMP_SAL WHERE 1 != 2;

SELECT * FROM EMP_COPY1

DELETE FROM EMP_COPY1
WHERE EID IN
(SELECT C2.EID FROM
EMP_COPY1 C1 JOIN EMP_COPY1 C2
ON C1.DEPT = C2.DEPT AND C1.DESI = C2.DESI 
WHERE C1.EID < C2.EID
)


SELECT * FROM EMP_COPY1

SELECT DEPT,DESI, COUNT(*) FROM EMP_COPY1
GROUP BY DEPT,DESI;


SELECT * FROM EMP_SAL

SELECT * INTO EMP_C FROM EMP_SAL WHERE 1 !=2;


DELETE FROM EMP_C
WHERE EID IN
(SELECT EID FROM
(SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT, DESI ORDER BY DEPT) AS RN
FROM EMP_C) X
WHERE X.RN >1);

SELECT * FROM EMP_C;

SELECT * FROM PRODUCT

DELETE FROM PRODUCT
WHERE PRODUCT_NAME IN ('VILLU','MOTA')
















------- TRIGGERS IN SQL---------------

CREATE TABLE ORDERS
(SNO INT IDENTITY(1,1),
CID VARCHAR(10),
PID VARCHAR(10),
QTY INT);

INSERT INTO ORDERS
VALUES('C0001','P0001',10);

SELECT * FROM ORDERS;
SELECT * FROM STOCK;


CREATE TABLE STOCK
(SNO INT IDENTITY(1,1),
PID VARCHAR(10),
QTY INT);


INSERT INTO STOCK
VALUES('P0001',100),
('P0002',1000),
('P0003',500),
('P0004',40),
('P0005',70),
('P0005',95);

SELECT * FROM STOCK;

CREATE TRIGGER STOCK_CUT
ON ORDERS
FOR INSERT
AS
BEGIN
      UPDATE STOCK SET QTY = QTY - (SELECT QTY FROM INSERTED)
	  WHERE PID = (SELECT PID FROM INSERTED)
END;

SELECT * FROM STOCK;
SELECT * FROM ORDERS;

INSERT INTO ORDERS
VALUES('C0002','P0002',200);












